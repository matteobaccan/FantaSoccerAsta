name: GraalVM Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        #os: [windows-latest, ubuntu-latest, macos-latest]
      max-parallel: 3

    if: github.ref == 'refs/heads/master'
    steps:
      - name: Setup GraalVM action
        # You may pin to the exact commit or the version.
        # uses: ayltai/setup-graalvm@eb0db9af1ceb6dadb398847c7e23fc3afa09c0d3
        uses: ayltai/setup-graalvm@master
        with:
          # The JDK version to be installed with GraalVM. E.g. 8, 11. See https://github.com/graalvm/graalvm-ce-builds/releases
          java-version: 11 # optional
          # The version of GraalVM to make available on PATH. E.g. 20.1.0, 19.3.2. See https://github.com/graalvm/graalvm-ce-builds/releases
          # Allineare la versione con pom.xml
          graalvm-version: 21.3.0
          # Install GraalVM Native Image
          native-image: true # optional

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      - name: Windows msvc setup
        uses: ilammy/msvc-dev-cmd@v1.12.1
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Windows msbuild setup
        uses: microsoft/setup-msbuild@v1
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Call maven
        run: mvn --no-transfer-progress -B package --file pom.xml -DskipNativeVersion=false

      - name: Create release date
        if: ${{ matrix.os == 'windows-latest' }}
        id: read_release_win
        shell: bash
        run: |
          r=$(date "+%Y%m%d-%H%M%S")
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Upload Windows Binaries to Release
        if: ${{ matrix.os == 'windows-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: release/windows/${{ steps.read_release_win.outputs.RELEASE_BODY }}
          file: D:\a\FantaSoccerAsta\FantaSoccerAsta\target\FantaSoccerAsta-0.0.4.exe
          #file: D:\a\FantaSoccerAsta\FantaSoccerAsta\target\FantaSoccerAsta.exe
          asset_name: FantaSoccerAsta.exe
          body: |
            Rilascio Windows del ${{ steps.read_release_win.outputs.RELEASE_BODY }}

      - name: Create release date
        if: ${{ matrix.os == 'ubuntu-latest' }}
        id: read_release_linux
        shell: bash
        run: |
          r=$(date "+%Y%m%d-%H%M%S")
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Upload Linux Binaries to Release
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: release/linux/${{ steps.read_release_linux.outputs.RELEASE_BODY }}
          file: /home/runner/work/FantaSoccerAsta/FantaSoccerAsta/target/FantaSoccerAsta
          asset_name: FantaSoccerAsta
          body: |
            Rilascio Linux del ${{ steps.read_release_linux.outputs.RELEASE_BODY }}

      - name: Create release date
        if: ${{ matrix.os == 'macos-latest' }}
        id: read_release_mac
        shell: bash
        run: |
          r=$(date "+%Y%m%d-%H%M%S")
          echo "::set-output name=RELEASE_BODY::$r"

      - name: Upload Mac Binaries to Release
        if: ${{ matrix.os == 'macos-latest' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: release/mac/${{ steps.read_release_mac.outputs.RELEASE_BODY }}
          file: /Users/runner/work/FantaSoccerAsta/FantaSoccerAsta/target/FantaSoccerAsta
          asset_name: FantaSoccerAsta
          body: |
            Rilascio MacOS del ${{ steps.read_release_mac.outputs.RELEASE_BODY }}

